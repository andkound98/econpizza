# Author: Gregor Boehl [mail@gregorboehl.com]
---

name: 'hank_labor'
description: 'A small example HANK model with endogenous labor supply'
functions_file: 'hank_labor_functions.py'
# NOTE: the file hank_with_comments.yaml contains a detailed explanation of the objects defined here

definitions: |
    from jax.numpy import log, maximum
    from econpizza.tools import percentile, jax_print

variables: [ div, y, y_prod, w, pi, R, Rn, Rr, Rstar, tax, z, beta, C, N, B, Top10C, Top10A ]
parameters: [ eis, frisch, theta, psi, phi_pi, phi_y, rho, rho_beta, rho_rstar, rho_z, vphi ]
shocks: [ e_beta, e_rstar, e_z ]

distributions:
  dist:
    skills: # dim0
      type: exogenous
      grid_variables: [skills_grid, skills_stationary, skills_transition]
      rho: 0.966
      sigma: 0.5
      n: 4
    a:
      type: endogenous
      grid_variables: a_grid
      min: 0.0
      max: 50
      n: 50

decisions:
  inputs: [VaPrime]
  calls: |
    trans = transfers(skills_stationary, div, tax, skills_grid)
    we = wages(w, skills_grid)
    VaPrimeExp = skills_transition @ VaPrime
    Va, a, c, n = hh(VaPrimeExp, a_grid, we, trans, Rr, beta, eis, frisch, vphi)
    n = labor_supply(n, skills_grid)
  outputs: [a,c,n]

aux_equations: |
    # define aggregated variables
    aggr_a = jnp.sum(dist*a, axis=(0,1))
    aggr_c = jnp.sum(dist*c, axis=(0,1))
    aggr_n = jnp.sum(dist*n, axis=(0,1))
    # calculate consumption and wealth share of top-10% cumsumers
    top10c = 1 - percentile(c, dist, .9)
    top10a = 1 - percentile(a, dist, .9)

equations:
    # definitions
    ~ C = aggr_c
    ~ Top10C = top10c
    ~ Top10A = top10a

    # firms
    ~ N = y_prod/z # production function
    ~ div = - w*N + (1 - psi*(pi/piSS - 1)**2/2)*y_prod # dividends
    ~ y = (1 - psi*(pi/piSS - 1)**2/2)*y_prod # "effective" output
    ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*w/z + psi*piPrime/R*(piPrime/piSS - 1)*piPrime/piSS*y_prodPrime/y_prod # NKPC

    # government
    ~ Rr = RLag/pi # real rate ex-post
    ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/yLag)**phi_y))**(1-rho)*RnLag**rho # MP rule on shadow nominal rate
    ~ R = maximum(1, Rn) # ZLB
    ~ tax = (Rr-1)*B # balanced budget

    # clearings
    ~ C = y # market clearing
    ~ aggr_a = B # bond market clearing
    ~ aggr_n = N # labor market clearing

    # exogenous
    ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta) # exogenous beta
    ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_rstar*exp(e_rstar) # exogenous rstar
    ~ z = zSS*(zLag/zSS)**rho_z*exp(e_z) # exogenous technology

steady_state:
    fixed_values:
        # parameters
        eis: 0.5
        frisch: 0.5
        theta: 6.
        psi: 96
        phi_pi: 2
        phi_y: .25
        rho: .8
        rho_beta: .9
        rho_rstar: .9
        rho_z: .8

        # steady state
        y: 1.0
        z: 1.0
        pi: 1.0
        Rstar: 1.002
        B: 5.6
        L: 1.0

    init_guesses:
        beta: 0.98
        vphi: 0.8
        w: (theta-1)/theta
        div: 1 - w
        tax: 0.028
        Rr: Rstar
        we: wages(w, skills_grid)
        T: transfers(skills_stationary, div, tax, skills_grid)
        VaPrime: hh_init(a_grid, we, Rr, eis, T)
