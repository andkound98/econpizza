# Author: Gregor Boehl [mail@gregorboehl.com]
---

name: 'hank2_med_scale'
description: 'A HANK model with two assets portfolio choice and full-blown aggregated medium scale model'
functions_file: 'hank2_functions.py'
# NOTE: the file hank_with_comments.yaml contains a detailed explanation of the objects defined here

definitions: |
    from jax.numpy import log, maximum
    from econpizza.utilities.grids import log_grid
    from econpizza.utilities.dists import expect_transition
    from econpizza.tools import jax_print
    k_grid = log_grid(amax=1., n=4)[::-1]

variables: [ C, mc, y, pi, div, p, n, z, w, k, q, R, Rn, Rstar, tax, g, Rb, Ra, piw, wealth, A, B, i, beta ]
parameters: [ sigma_c, eta, psi, psiw, delta, Bg, xi0, xi1, xi2, phiss, zeta, phi_pi, phi_y, rho, rho_beta, rho_r, rho_g, rho_z, theta_w, alpha, theta, chi ]
shocks: [ e_beta ]

distributions:
  dist:
    skills:
      type: exogenous
      grid_variables: [skills_grid, skills_stationary, skills_transition]
      rho: 0.966
      sigma: 0.92
      n: 3
    b:
      type: endogenous
      grid_variables: b_grid
      min: 0.0
      max: 50
      n: 10
    a:
      type: endogenous
      grid_variables: a_grid
      min: 0.0
      max: 200
      n: 20

decisions:
  inputs: [VaPrime,VbPrime]
  calls: |
    z_grid = income(skills_grid, tax, w, n)
    Psi1 = marginal_cost_grid(a_grid, Ra-1, xi0, xi1, xi2)
    VaPrimeExp = expect_transition(skills_transition, VaPrime)
    VbPrimeExp = expect_transition(skills_transition, VbPrime)
    Va, Vb, a, b, c, uce = hh(VaPrimeExp, VbPrimeExp, a_grid, b_grid, z_grid, skills_grid, k_grid, beta, sigma_c, Rb-1, Ra-1, xi0, xi1, xi2, Psi1)
  outputs: [a,b,c,uce]

aux_equations: |
    # aggregation
    aggr_a = jnp.sum(dist*a, axis=(0,1,2))
    aggr_b = jnp.sum(dist*b, axis=(0,1,2))
    aggr_c = jnp.sum(dist*c, axis=(0,1,2))
    UCE = jnp.sum(dist*uce, axis=(0,1,2))

    # misc definitions
    dI = i/iLag
    dIPrime = iPrime/i
    price_adj_cost = psi*(pi/piSS - 1)**2/2*y
    cap_adj_cost = 1/(2*phiss)*(dI - 1)**2
    pshareLag = pLag / ALag

equations:
  # definitions that should be tracked
  ~ A = aggr_a
  ~ B = aggr_b
  ~ C = aggr_c
  ~ wealth = A + B
  ~ p + Bg = wealth

  # firms
  ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*mc + psi*piPrime/Rn*(piPrime/piSS - 1)*piPrime/piSS*yPrime/y # NKPC
  ~ divPrime + pPrime = p * RPrime
  ~ n = (y / z / kLag ** alpha) ** (1 / (1 - alpha))
  ~ mc = w * n / (1 - alpha) / y
  ~ q*(1 - 1/(2*phiss)*(dI - 1)**2 - 1/phiss*(dI - 1)*dI) + qPrime/(RPrime*phiss)*(dIPrime-1)*dIPrime**2 = 1
  ~ RPrime*q - (1-delta)*qPrime = alpha * zPrime * (nPrime / k) ** (1 - alpha) * mcPrime
  ~ i = k - (1 - delta) * kLag + cap_adj_cost
  ~ div = y - w * n - i - price_adj_cost

  # government
  ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/yLag)**phi_y))**(1-rho)*RnLag**rho
  ~ Rb = R - zeta
  ~ Ra = pshareLag * (div + p) / pLag + (1 - pshareLag) * R
  ~ R = RnLag/pi # ex-post real rate
  ~ tax = ((R-1) * Bg + g) / w / n

  # unions
  ~ piw = pi * w / wLag
  ~ psiw*(piw/piwSS - 1)*piw/piwSS = theta_w*chi * n ** (1 + 1 / eta) + (1-theta_w)*(1 - tax) * w * n * UCE + psi*beta*(piwPrime/piwSS - 1)*piwPrime/piwSS

  # exogenous process
  ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_r # exogenous Rstar
  ~ g = gSS*(gLag/gSS)**rho_g
  ~ z = zSS*(zLag/zSS)**rho_z
  ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta)

steady_state:
    fixed_values:

      # parameters
      sigma_c: 0.5
      eta: 1
      psi: 96
      psiw: 96
      delta: 0.02
      Bg: 2.8
      xi0: 0.25
      xi2: 2
      phiss: 4
      zeta: 0.005
      phi_pi: 1.5
      phi_y: 1.5
      rho: 0.8
      rho_beta: 0.8
      rho_r: 0.8
      rho_g: 0.8
      rho_z: 0.8
      theta_w: 11

      # steady state
      piw: 1.
      y: 1.
      n: 1.
      q: 1.
      k: 10.
      i: 0.2
      Rstar: 1.0125
      R: Rstar
      Rn: Rstar
      Ra: Rstar
      Rb: Ra - zeta
      pi: 1.
      g: 0.2
      wealth: 14
      B: 1.04

      # 1. Solve for markup to hit total wealth
      p: wealth - Bg
      mc: 1 - (R - 1) * (p - k) / y
      theta: 1/(1-mc)
      # 2. Solve for capital share to hit k
      alpha: (R - 1 + delta) * k / y / mc
      # 3. Solve for TFP to hit y
      z: y * k ** (-alpha) * n ** (alpha - 1)
      # 4. Solve for w such that piw = 0
      w: mc * (1 - alpha) * y / n

    init_guesses:
      div: .14
      chi: 2.
      beta: 0.98
      xi1: 5.
      tax: 0.3

      # get rough idea on initial value functions
      z_grid: income(skills_grid, tax, w, n)
      VaPrime: hh_init_Va(b_grid, a_grid, z_grid, sigma_c)
      VbPrime: hh_init_Vb(b_grid, a_grid, z_grid, sigma_c)
