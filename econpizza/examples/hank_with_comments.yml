# Author: Gregor Boehl [mail@gregorboehl.com]
---

name: 'hank'
description: 'A small example HANK model with one asset'
# the functions_file contains longer definitions, e.g. of the value function 'hh'
# the path is relative to the location of this yaml
functions_file: 'hank_functions.py'

# there are three stages:
# 1. (making) decisions
# 2. (moving) distributions
# 3. (solving for) aggregte equations
#
# the following definitions are available during all three stages:
definitions: |
    from jax.numpy import log, maximum
    # jax_print can be used for debugging
    from econpizza.tools import percentile, jax_print

# these lists define the relevant models objects
variables: [ div, y, y_prod, w, pi, R, Rn, Rr, Rstar, tax, z, beta, C, n, B, Top10C, Top10A ]
parameters: [ sigma_c, frisch, theta, psi, phi_pi, phi_y, rho, rho_beta, rho_rstar, rho_z ]
shocks: [ e_beta, e_rstar, e_z ]

# this defines all distribution objects (so far, only one distribution is supported)
distributions:
  # the name of the first distribution
  dist:
    # ordering matters. The ordering here is corresponds to the shape of the axis of the distribution
    # the naming of the dimensions (skills, a) is arbitrary
    skills:
      # first dimension
      type: exogenous
      grid_variables: [skills_grid, skills_stationary, skills_transition] # returns skills_grid, skills_stationary, skills_transition
      rho: 0.966
      sigma: 0.6
      n: 4
    a:
      # second dimension
      type: endogenous
      # endogenous variables require inputs from the decisions stage. This assumes that the decisions stage returns a variable named 'a'
      # a variable named a_grid with the following properties will be made available during decisions calls and distributions calls
      grid_variables: a_grid
      min: 0.0
      max: 50
      n: 50

# stage one: iterating the decisions function backwards
decisions:
  # define the multidimensional input "VaPrime", in addition to all aggregated variables (defined in 'variables')
  inputs: [VaPrime]
  calls: |
    # calls executed during the decisions stage
    # these are executed subsequently (top-down)
    # iteration starts with the last in time T and then iterating backwards
    # each call takes the previous input (Va as VaPrime) as given
    # these functions are defined in functions_file
    trans = transfers(skills_stationary, div, tax, skills_grid)
    VaPrimeExp = skills_transition @ VaPrime
    Va, a, c = hh(VaPrimeExp, a_grid, skills_grid, w, n, trans, Rr, beta, sigma_c, frisch)
  # the 'outputs' values are stored for the following stages
  # NOTE: each output must have the same shape as the distribution (here: 4,40)
  outputs: [a,c]

# stage two: iterating the distribution forwards
# This is done automatically using the information provided in 'distributions'
# inputs are all grid_variables and, for endogenous distribution variables, the outputs from the decisions stage.
# NOTE: for endogenous distributions, the output variables must be named appropiately, i.e. like the members of 'distributions' (e.g. here 'a')
# outputs are the distribution(s) named as define in 'distributions' (e.g. here 'dist')

# intermediate stage (optional): aux_equations
# these can contain misc definitions that are available during the final stage.
# outputs from decisions, the grid variables, the distributions and
# aggregate variables from 'variables' (including those with "Prime", "Lag",...) are included by default
# from here on the objects are _sequences_ with shapes (..., horizon), i.e. the last dimension is always the time dimension
aux_equations: |
    # NOTE: summing over the first two dimensions e and a, but not the time dimension (dimension 2)
    # `dist` here corresponds to the dist *at the beginning of the period*
    aggr_a = jnp.sum(dist*a, axis=(0,1))
    aggr_c = jnp.sum(dist*c, axis=(0,1))
    # calculate consumption and wealth share of top-10% cumsumers
    top10c = 1 - percentile(c, dist, .9)
    top10a = 1 - percentile(a, dist, .9)

# final/main stage: aggregate equations
equations:
    # definitions
    ~ C = aggr_c
    ~ Top10C = top10c
    ~ Top10A = top10a

    # firms
    ~ n = y_prod/z # production function
    ~ div = -w*n + (1 - psi*(pi/piSS - 1)**2/2)*y_prod # dividends
    ~ y = (1 - psi*(pi/piSS - 1)**2/2)*y_prod # "effective" output
    ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*w + psi*piPrime/R*(piPrime/piSS - 1)*piPrime/piSS*y_prodPrime/y_prod # NKPC

    # government
    ~ tax = (Rr-1)*BLag # balanced budget
    ~ Rr = RLag/pi # real ex-post bond return
    ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/yLag)**phi_y))**(1-rho)*RnLag**rho # MP rule on shadow nominal rate
    #~ R = maximum(1, Rn) # ZLB
    ~ R = Rn

    # clearings
    ~ C = y # market clearing
    ~ B = aggr_a # bond market clearing
    ~ w**frisch = n # labor market clearing

    # exogenous
    ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta) # exogenous beta
    ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_rstar*exp(e_rstar) # exogenous rstar
    ~ z = zSS*(zLag/zSS)**rho_z*exp(e_z) # exogenous technology

steady_state:
    fixed_values:
        # parameters:
        sigma_c: 0.5
        frisch: 0.5
        theta: 6.
        psi: 96
        phi_pi: 1.5
        phi_y: .25
        rho: .8
        rho_beta: .9
        rho_rstar: .9
        rho_z: .8

        # steady state
        y: 1.0
        y_prod: 1.0
        C: 1.0
        pi: 1.0
        beta: 0.98
        B: 5.6
        # definitions can be recursive: theta is defined above
        w: (theta-1)/theta
        n: w**frisch
        div: 1 - w*n
        z: y/n

    init_guesses:
        z: .8
        Rstar: 1.002
        Rr: Rstar
        Rn: Rstar
        R: Rstar
        tax: 0.028
        VaPrime: hh_init(a_grid, skills_stationary)
