# Author: Gregor Boehl [mail@gregorboehl.com]
---

name: 'hank2'
description: 'A HANK model with two assets and portfolio choice'
functions_file: 'hank2_functions.py'
# NOTE: the file hank_with_comments.yaml contains a detailed explanation of the objects defined here

definitions: |
    from jax.numpy import log, maximum
    from econpizza.utilities.grids import log_grid
    from econpizza.utilities.dists import expect_transition
    from econpizza.tools import jax_print
    kappa_grid = log_grid(amax=1., n=4)[::-1]

variables: [ C, mc, y, pi, pitilde, div, shares, n, z, w, k, q, Rr, R, Rn, Rstar, tax, g, Rb, Ra, wn, piwn, piwntilde, wealth, A, B, i, beta, price_markup, wage_markup, eps_i, MPK, cap_util, cap_util_costs ]
parameters: [ sigma_c, sigma_l, psi, psi_w, delta, Bg, xi0, xi1, xi2, Phi, zeta, phi_pi, phi_y, rho, rho_beta, rho_r, rho_g, rho_z, theta_w, alpha, theta, chi, omega, omega_w, cap_util_param, iota_w ]
shocks: [ e_beta, e_p, e_w, e_i, e_z, e_g, e_r ]

distributions:
  dist:
    skills:
      type: exogenous
      grid_variables: [skills_grid, skills_stationary, skills_transition]
      rho: 0.966
      sigma: 0.92
      n: 3
    b:
      type: endogenous
      grid_variables: b_grid
      min: 0.0
      max: 50
      n: 10
    a:
      type: endogenous
      grid_variables: a_grid
      min: 0.0
      max: 200
      n: 20

decisions:
  inputs: [VaPrime,VbPrime]
  calls: |
    z_grid = income(skills_grid, tax, w, n)
    Psi1 = marginal_cost_grid(a_grid, Ra-1, xi0, xi1, xi2)
    VaPrimeExp = expect_transition(skills_transition, VaPrime)
    VbPrimeExp = expect_transition(skills_transition, VbPrime)
    Va, Vb, a, b, c, uce = hh(VaPrimeExp, VbPrimeExp, a_grid, b_grid, z_grid, skills_grid, kappa_grid, beta, sigma_c, Rb-1, Ra-1, xi0, xi1, xi2, Psi1)
  outputs: [a,b,c,uce]

aux_equations: |
    # aggregation
    aggr_a = jnp.sum(dist*a, axis=(0,1,2))
    aggr_b = jnp.sum(dist*b, axis=(0,1,2))
    aggr_c = jnp.sum(dist*c, axis=(0,1,2))
    UCE = jnp.sum(dist*uce, axis=(0,1,2))

    # misc definitions
    dI = i/iLag
    dIPrime = iPrime/i
    assetshareLag = sharesLag / ALag

equations:
  # definitions that should be tracked
  ~ A = aggr_a
  ~ B = aggr_b
  ~ C = aggr_c
  ~ wealth = A + B
  ~ shares + Bg = wealth

  # firms
  ~ psi*(pi/pitilde - 1)*pi/pitilde = 1/(1-price_markup) + price_markup/(price_markup-1)*mc + psi/RrPrime*(piPrime/pitildePrime - 1)*piPrime/pitildePrime*yPrime/y # price Phillips curve
  ~ pitilde = piSS**omega*piLag**(1-omega) # price indexation
  ~ divPrime + sharesPrime = shares * RrPrime
  ~ y = (kLag*cap_util)**alpha*(z*n)**(1-alpha) # production function
  ~ mc = w * n / (1 - alpha) / y # real marginal costs
  ~ MPK = alpha*mc*y/(cap_util*kLag) # marginal product of capital
  ~ q*RrPrime = MPKPrime*cap_utilPrime + (1-delta)*qPrime - cap_util_costsPrime # return to capital
  ~ k = (1-delta)*kLag + eps_i*(1 - Phi/2*(i/iLag - 1)**2)*i # law of motion for capital
  ~ 1 = q*eps_i*(1 - Phi/2*(i/iLag - 1)**2 - Phi*(i/iLag - 1)*i/iLag) + eps_iPrime/RrPrime*qPrime*Phi*(iPrime/i - 1)*(iPrime/i)**2 # investment Euler equation
  ~ cap_util_costs = MPKSS*(cap_util - 1) + cap_util_param/(1-cap_util_param)/2*(cap_util - 1)**2 # capital utilisation costs
  ~ (1-cap_util_param)*(MPK - MPKSS) = cap_util_param*(cap_util - 1) # cap_util utilisation
  ~ div = (1 - psi/2*(pi/pitilde - 1)**2)*y - w * n - i

  # government
  ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/ySS)**phi_y))**(1-rho)*RnLag**rho # Taylor rule for the notional nominal interest rate
  ~ R = max(1,Rn) # ZLB
  ~ Rb = Rr - zeta # real bond returns
  ~ Ra = assetshareLag * (div + shares) / sharesLag + (1 - assetshareLag) * Rr # real asset returns
  ~ Rr = RLag/pi # ex-post real rate
  ~ tax = ((Rr-1) * Bg + g) / w / n # government budget

  # unions
  ~ piwn = wn/wnLag*pi # wage inflation
  ~ w = max(iota_w*wLag/pi, wn) # dowards nominal wage rigidity
  ~ psi_w*(piwn/piwntilde - 1)*piwn/piwntilde = wage_markup/(1-wage_markup)*chi*n**(1+sigma_l) + 1/(1-wage_markup)*(1 - tax)*w*n*UCE + psi_w*beta*(piwnPrime/piwntildePrime - 1)*piwnPrime/piwntildePrime # wage Phillips curve
  ~ piwntilde = piwnSS**omega_w*piwn**(1-omega_w) # wage indexation

  # exogenous process
  ~ log(Rstar) = (1-rho_r)*log(RstarSS) + rho_r*log(RstarLag) + e_r # shock to the natural rate of interest
  ~ log(eps_i) = rho_i*log(eps_iLag) + e_i # shock to marginal efficiency of investment
  ~ log(price_markup) = (1-rho_p)*log(price_markupSS) + rho_p*log(price_markupLag) + e_p # price markup shock
  ~ log(wage_markup) = (1-rho_w)*log(wage_markupSS) + rho_w*log(wage_markupLag) + e_w # wage markup shock
  ~ g = (gSS)**(1-rho_g)*gLag**rho_g*exp(e_g) # level of government spending
  ~ log(z) = (1-rho_z)*log(zSS) + rho_z*log(zLag) + e_z # technology shock
  ~ log(beta) = (1-rho_beta)*log(betaSS) + rho_beta*log(betaLag) + e_beta # discount factor shock

steady_state:
    fixed_values:

      # parameters
      sigma_c: 2.
      sigma_l: 2.
      psi: 96
      psi_w: 96
      delta: 0.02
      Bg: 2.8
      xi0: 0.25
      xi2: 2
      Phi: 5.6 # parameter on the costs of investment adjustment
      zeta: 0.005
      phi_pi: 1.5
      phi_y: 1.5
      rho: 0.8
      rho_beta: 0.8
      rho_r: 0.8
      rho_g: 0.8
      rho_z: 0.8
      rho_w: 0.8
      rho_p: 0.8
      rho_i: 0.8
      theta_w: 11. # elasticity of substitution for wages
      omega_w: 0.66 # coefficient on steady state wage inflation in wage indexation
      omega: 0.44 # coefficient on steady state inflation in price indexation
      cap_util_param: 0.8 # parameter on the capital utilisation costs
      iota_w: 1. # degree of dowards nominal wage rigidity

      # steady state
      wage_markup: theta_w/(theta_w-1)
      cap_util: 1.
      cap_util_costs: 0.
      pi: 1.02^.25 # steady state inflation
      piw: pi
      pitilde: pi
      piwntilde: pi
      eps_i: 1.
      y: 1.
      n: 1.
      q: 1.
      k: 10.
      i: 0.2
      Rr: 1.0125
      Rstar: Rr*pi
      Rn: Rstar
      Ra: Rr
      Rb: Rr - zeta
      g: 0.2
      wealth: 14
      B: 1.04

      # 1. Solve for markup to hit total wealth
      shares: wealth - Bg
      mc: 1 - (Rr - 1) * (shares - k) / y
      theta: 1/(1-mc)
      price_markup: theta/(theta-1)
      # 2. Solve for capital share to hit k
      alpha: (Rr - 1 + delta) * k / y / mc
      # 3. Solve for TFP to hit y
      z: 1/n*y**(1/(1-alpha))*k**(-alpha/(1-alpha))
      # 4. Solve for w such that piw = pi
      w: mc * (1 - alpha) * y / n

    init_guesses:
      div: .14
      chi: 2.
      beta: 0.98
      xi1: 5.
      tax: 0.3

      # get rough idea on initial value functions
      z_grid: income(skills_grid, tax, w, n)
      VaPrime: hh_init_Va(b_grid, a_grid, z_grid, sigma_c)
      VbPrime: hh_init_Vb(b_grid, a_grid, z_grid, sigma_c)
